// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "mysql"
	url      = env("DATABASE_URL")
}

model User {
  id            Int               @id @default(autoincrement())
  name          String
  nickname      String            @unique
  email         String            @unique
  password      String
  passwordToken String?           @unique
  passwordValid DateTime?
  about         String?
  activity      String?
  friendshipsA  Friendship[]      @relation("UserFriendshipsA")
  friendshipsB  Friendship[]      @relation("UserFriendshipsB")
  groups        GroupUser[]
  createdGroups Group[]
  posts         Post[]
  comments      Comment[]
  profileImage  UserProfileImage?
  certPosts     CertPost[]
  chatRoomUser  ChatRoomUser[]
  chatMessage   ChatMessage[]
}

model ChatRoom {
	id            Int            @id @default(autoincrement())
	chatRoomUsers ChatRoomUser[]
	messages      ChatMessage[]
	createdAt     DateTime       @default(now())
}

model ChatRoomUser {
	chatRoomId Int
	chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
	userId     Int
	user       User     @relation(fields: [userId], references: [id])

	@@id([chatRoomId, userId])
}

model ChatMessage {
	id        Int      @id @default(autoincrement())
	room      ChatRoom @relation(fields: [roomId], references: [id])
	roomId    Int
	sender    User     @relation(fields: [senderId], references: [id])
	senderId  Int
	message   String
	createdAt DateTime @default(now())
	isRead    Boolean  @default(false)
}

model UserProfileImage {
	id       Int    @id @default(autoincrement())
	imageUrl String
	user     User   @relation(fields: [userId], references: [id])
	userId   Int    @unique
}

model Group {
  id           Int          @id @default(autoincrement())
  name         String
  manager      User         @relation(fields: [managerId], references: [id])
  managerId    Int
  posts        Post[]
  goal         String?
  region       String?
  introduction String?
  memberLimit  Int          @default(50)
  groupUser    GroupUser[]
  groupImage   GroupImage[]
}

model GroupUser {
	user       User    @relation(fields: [userId], references: [id])
	userId     Int
	group      Group   @relation(fields: [groupId], references: [id])
	groupId    Int
	isAdmin    Boolean @default(false)
	isAccepted Boolean @default(false)

	@@id([userId, groupId])
}

model GroupImage {
	id       Int    @id @default(autoincrement())
	imageUrl String
	group    Group  @relation(fields: [groupId], references: [id])
	groupId  Int
}

model Friendship {
	id         Int     @id @default(autoincrement())
	userA      User    @relation("UserFriendshipsA", fields: [userAId], references: [id])
	userAId    Int
	userB      User    @relation("UserFriendshipsB", fields: [userBId], references: [id])
	userBId    Int
	isAccepted Boolean @default(false)

	@@unique([userAId, userBId])
}

model Post {
	id        Int         @id @default(autoincrement())
	writer    User        @relation(fields: [writerId], references: [id])
	writerId  Int
	group     Group       @relation(fields: [groupId], references: [id])
	groupId   Int
	title     String
	content   String
	isNotice  Boolean
	createdAt DateTime    @default(now())
	comments  Comment[]
	images    PostImage[]
}

model Comment {
  id         Int       @id @default(autoincrement())
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  writer     User      @relation(fields: [writerId], references: [id])
  writerId   Int
  post       Post?     @relation(fields: [postId], references: [id])
  postId     Int?
  certPost   CertPost? @relation(fields: [certPostId], references: [id])
  certPostId Int?
  parent     Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  parentId   Int?
  children   Comment[] @relation("CommentToComment")
}

model PostImage {
	id       Int    @id @default(autoincrement())
	imageUrl String
	post     Post   @relation(fields: [postId], references: [id])
	postId   Int
}

model CertPost {
  id        Int             @id @default(autoincrement())
  writer    User            @relation(fields: [writerId], references: [id])
  writerId  Int
  title     String
  borough   String
  distance  Float
  content   String
  createdAt DateTime        @default(now())
  comments  Comment[]
  images    CertPostImage[]
}

model CertPostImage {
  id         Int      @id @default(autoincrement())
  imageUrl   String
  certPost   CertPost @relation(fields: [certPostId], references: [id])
  certPostId Int
}

model plogging_certification_board {
  id              Int       @id @default(autoincrement())
  title           String    @db.VarChar(256)
  writerUser      Int    
  startDt         DateTime
  endDt           DateTime
  description     String    @db.VarChar(256)
  groupYn         String    @db.VarChar(1) @default("N")
  groupName       String?   @db.VarChar(60)
  groupId         Int?
  createDt        DateTime  @default(now())
  modifyDt        DateTime  @updatedAt
  region          String
  location        String
  distance        Float
  trashAmount     Int
  averagePace     Float
}

// 플로깅 인증 점수
model plogging_score {
  score_id     Int     @id @default(autoincrement())
  certification_id    Int
  user_id     Int         
  group_yn     String       @db.VarChar(1) @default("N")
  group_id     String?         @db.VarChar(60)
  create_dt     DateTime        @default(now())  
}