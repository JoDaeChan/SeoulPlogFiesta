// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "mysql"
	url      = env("DATABASE_URL")
}
//언젠가 쓸 일이 있겠찌..?
// model Course {
//   id                 Int    @id @default(autoincrement())
//   WLK_COURS_FLAG_NM  String
//   WLK_COURS_NM       String
//   COURS_DC           String
//   SIGNGU_NM          String
//   COURS_LEVEL_NM     String
//   COURS_LT_CN        Float
//   COURS_DETAIL_LT_CN String
//   ADIT_DC            String @db.VarChar(1000)
//   COURS_TIME_CN      String
//   OPTN_DC            String
//   TOILET_DC          String
//   CVNTL_NM           String
//   LNM_ADDR           String
//   COURS_SPOT_LA      Float
//   COURS_SPOT_LO      Float
// }

model User {
	id            Int          @id @default(autoincrement())
	name          String
	nickname      String       @unique
	email         String       @unique
	password      String
	about         String?
	activity      String?
	friendshipsA  Friendship[] @relation("UserFriendshipsA")
	friendshipsB  Friendship[] @relation("UserFriendshipsB")
	groups        GroupUser[]
	createdGroups Group[]
	posts         Post[]
	comments      Comment[]
	profileImage  UserProfileImage?
	certPosts			CertPost[]
}

model UserProfileImage {
	id         Int      @id @default(autoincrement())
	imageUrl   String
	user       User     @relation(fields: [userId], references: [id])
	userId     Int      @unique
}

model Group {
	id            Int            @id @default(autoincrement())
	name          String
	manager       User           @relation(fields: [managerId], references: [id])
	managerId     Int
	posts         Post[]
	goal          String?
	region        String?
	introduction  String?
	memberLimit   Int            @default(50)
	GroupUser     GroupUser[]
	images        GroupImage[]
	certPosts     CertPost[]
}

model GroupImage {
	id           Int          @id @default(autoincrement())
	imageUrl     String
	group 			 Group @relation(fields: [groupId], references: [id])
	groupId 		 Int
}

model GroupUser {
	id         Int        @id @default(autoincrement())
	user       User       @relation(fields: [userId], references: [id])
	userId     Int
	group      Group      @relation(fields: [groupId], references: [id])
	groupId    Int
	isAdmin    Boolean    @default(false)
	isAccepted Boolean    @default(false)
	certPosts  CertGroupUser[]

	@@unique([userId, groupId])
}

model Friendship {
	id      Int  @id @default(autoincrement())
	userA   User @relation("UserFriendshipsA", fields: [userAId], references: [id])
	userAId Int
	userB   User @relation("UserFriendshipsB", fields: [userBId], references: [id])
	userBId Int

	@@unique([userAId, userBId])
}

model Post {
	id        Int       @id @default(autoincrement())
	writer    User      @relation(fields: [writerId], references: [id])
	writerId  Int
	group     Group     @relation(fields: [groupId], references: [id])
	groupId   Int
	title     String
	content   String
	isNotice  Boolean
	createdAt DateTime  @default(now())
	comments  Comment[]
	images    PostImage[]
}
model PostImage {
	id				  Int      @id @default(autoincrement())
	imageUrl 		String
	post 				Post @relation(fields: [postId], references: [id])
	postId 			Int
}

model Comment {
	id         Int       @id @default(autoincrement())
	content    String
	createdAt  DateTime  @default(now())
	updatedAt  DateTime  @updatedAt
	writer     User      @relation(fields: [writerId], references: [id])
	writerId   Int
	post       Post?     @relation(fields: [postId], references: [id])
	postId     Int?
	certPost   CertPost? @relation(fields: [certPostId], references: [id])
	certPostId Int?
	parent     Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
	parentId   Int?
	children   Comment[] @relation("CommentToComment")
}

model CertPost {
	id          Int            @id @default(autoincrement())
	writer      User           @relation(fields: [writerId], references: [id])
	writerId    Int
	title       String
	region      String
	location    String
	distance    Float
	trashAmount Int
	averagePace Float
	startTime   DateTime
	endTime     DateTime
	description String
	createdAt   DateTime       @default(now())
	comments    Comment[]
	images      CertPostImage[]
	category    Boolean        @default(false)
	group       Group?         @relation(fields: [groupId], references: [id])
	groupId     Int?
	certGroupUsers  CertGroupUser[]
}

model CertGroupUser {
	certPost   CertPost  @relation(fields: [certPostId], references: [id])
	certPostId Int
	groupUser  GroupUser @relation(fields: [groupUserId], references: [id])
	groupUserId      Int

	@@id([certPostId, groupUserId])
}

model CertPostImage {
	id           Int          @id @default(autoincrement())
	imageUrl     String
	certPost 		 CertPost @relation(fields: [certPostId], references: [id])
	certPostId 	 Int
}
