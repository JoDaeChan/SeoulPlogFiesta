generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id            Int               @id @default(autoincrement())
    name          String
    nickname      String            @unique
    email         String            @unique
    password      String
    about         String?
    activity      String?
    comments      Comment[]
    friendshipsA  Friendship[]      @relation("UserFriendshipsA")
    friendshipsB  Friendship[]      @relation("UserFriendshipsB")
    createdGroups Group[]
    groups        GroupUser[]
    posts         Post[]
    profileImage  UserProfileImage?
    certPost      certPost[]
}

model UserProfileImage {
    id       Int    @id @default(autoincrement())
    imageUrl String
    userId   Int    @unique
    user     User   @relation(fields: [userId], references: [id])
}

model Group {
    id           Int         @id @default(autoincrement())
    name         String
    goal         String?
    introduction String?
    managerId    Int
    memberLimit  Int         @default(50)
    region       String?
    manager      User        @relation(fields: [managerId], references: [id])
    GroupUser    GroupUser[]
    posts        Post[]

    @@index([managerId], map: "Group_managerId_fkey")
}

model GroupUser {
    userId     Int
    groupId    Int
    isAccepted Boolean @default(false)
    isAdmin    Boolean @default(false)
    group      Group   @relation(fields: [groupId], references: [id])
    user       User    @relation(fields: [userId], references: [id])

    @@id([userId, groupId])
    @@index([groupId], map: "GroupUser_groupId_fkey")
}

model Friendship {
    id      Int  @id @default(autoincrement())
    userAId Int
    userBId Int
    userA   User @relation("UserFriendshipsA", fields: [userAId], references: [id])
    userB   User @relation("UserFriendshipsB", fields: [userBId], references: [id])

    @@unique([userAId, userBId])
    @@index([userBId], map: "Friendship_userBId_fkey")
}

model Post {
    id        Int         @id @default(autoincrement())
    writerId  Int
    groupId   Int
    title     String
    content   String
    isNotice  Boolean
    createdAt DateTime    @default(now())
    comments  Comment[]
    group     Group       @relation(fields: [groupId], references: [id])
    writer    User        @relation(fields: [writerId], references: [id])
    images    PostImage[]

    @@index([groupId], map: "Post_groupId_fkey")
    @@index([writerId], map: "Post_writerId_fkey")
}

model PostImage {
    id       Int    @id @default(autoincrement())
    imageUrl String
    postId   Int
    post     Post   @relation(fields: [postId], references: [id])

    @@index([postId], map: "PostImage_postId_fkey")
}

model Comment {
    id         Int       @id @default(autoincrement())
    writerId   Int
    postId     Int?
    content    String
    createdAt  DateTime  @default(now())
    certPostId Int?
    parentId   Int?
    updatedAt  DateTime  @updatedAt
    certPost   certPost? @relation(fields: [certPostId], references: [id])
    parent     Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
    children   Comment[] @relation("CommentToComment")
    post       Post?     @relation(fields: [postId], references: [id])
    writer     User      @relation(fields: [writerId], references: [id])

    @@index([certPostId], map: "Comment_certPostId_fkey")
    @@index([parentId], map: "Comment_parentId_fkey")
    @@index([postId], map: "Comment_postId_fkey")
    @@index([writerId], map: "Comment_writerId_fkey")
}

model certPost {
    id            Int             @id @default(autoincrement())
    writerId      Int
    title         String
    borough       String
    distance      Float
    content       String
    createdAt     DateTime        @default(now())
    comments      Comment[]
    User          User            @relation(fields: [writerId], references: [id])
    certPostImage certPostImage[]

    @@index([writerId], map: "certPost_writerId_fkey")
}

model certPostImage {
    id         Int      @id @default(autoincrement())
    imageUrl   String
    certPostId Int
    certPost   certPost @relation(fields: [certPostId], references: [id])

    @@index([certPostId], map: "certPostImage_certPostId_fkey")
}
